// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  role          Role            @default(USER)
  email         String?
  username      String          @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Consolidator {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  remarks String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services Service[]
  goods    Good[]
}

enum ServiceType {
  IN
  OUT
}

model Service {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  date            DateTime
  serviceType     ServiceType
  truckNumber     String?
  containerNumber String?
  PKBENumber      String?
  PKBEDate        DateTime?
  containerSize   ContainerSize?
  remarks         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  goods          Good[]
  Consolidator   Consolidator  @relation(fields: [consolidatorId], references: [id])
  consolidatorId String        @db.ObjectId
  serviceGoods   ServiceGood[]
}

enum ContainerSize {
  TWENTY_FEET
  FORTY_FEET
}

model Good {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  shipper         String
  consignee       String
  destination     String
  packageType     String
  block           String?
  mailNumber      String?
  PEBNumber       String?
  PEBDate         DateTime?
  NPENumber       String?
  NPEDate         DateTime?
  currentQuantity Int       @default(0)
  truckNumber     String?
  date            DateTime?
  remarks         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Consolidator   Consolidator  @relation(fields: [consolidatorId], references: [id])
  consolidatorId String        @db.ObjectId
  services       Service?      @relation(fields: [serviceId], references: [id])
  serviceId      String?       @db.ObjectId
  serviceGoods   ServiceGood[]
}

model ServiceGood {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String  @db.ObjectId
  good      Good    @relation(fields: [goodId], references: [id])
  goodId    String  @db.ObjectId
  quantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([serviceId, goodId])
  @@index([goodId], map: "good_idx")
  @@index([serviceId], map: "service_idx")
}

model Log {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  type         String
  actionType   String
  errorMessage String?
  data         String

  createdAt DateTime @default(now())
}
